// Esta es la expresión que vamos a revisar para ver si los símbolos están bien balanceados
string expresion = "{7 + (8 * 5) - [(9 - 7) + (4 + 1)]}";

// Llamamos a la función que chequea si todo está en orden con los paréntesis, llaves y corchetes
bool balanceada = EstaBalanceada(expresion);

// Mostramos el resultado por pantalla
if (balanceada)
    Console.WriteLine("Fórmula balanceada.");
else
    Console.WriteLine("Fórmula desbalanceada.");

// Función que revisa si la expresión tiene los símbolos bien emparejados
bool EstaBalanceada(string expresion)
{
    // Usamos un arreglo para simular una pila donde vamos a guardar los símbolos de apertura
    char[] pila = new char[expresion.Length];
    int tope = -1; // Aquí guardamos la posición del último símbolo agregado, -1 significa que está vacía

    // Recorremos cada carácter de la expresión uno por uno
    for (int i = 0; i < expresion.Length; i++)
    {
        char c = expresion[i];

        // Si es un símbolo que abre algo, lo guardamos en la pila
        if (c == '(' || c == '{' || c == '[')
        {
            tope++;          // Subimos el tope porque agregamos un elemento
            pila[tope] = c;  // Guardamos el símbolo
        }
        // Si es un símbolo de cierre, tenemos que ver si coincide con el último que abrimos
        else if (c == ')' || c == '}' || c == ']')
        {
            // Si la pila está vacía, significa que hay un cierre sin apertura, así que no está balanceado
            if (tope == -1)
                return false;

            // Sacamos el último símbolo de apertura que pusimos en la pila
            char apertura = pila[tope];
            tope--; // Bajamos el tope porque ya sacamos ese elemento

            // Comprobamos que el símbolo de apertura y cierre coincidan
            if (!EsPar(apertura, c))
                return false; // Si no coinciden, entonces está mal
        }
    }

    // Si al final la pila está vacía, quiere decir que todo está balanceado
    return tope == -1;
}

// Esta función solo compara si el par de símbolos es correcto (por ejemplo, '(' con ')')
bool EsPar(char apertura, char cierre)
{
    return (apertura == '(' && cierre == ')') ||
           (apertura == '{' && cierre == '}') ||
           (apertura == '[' && cierre == ']');
}