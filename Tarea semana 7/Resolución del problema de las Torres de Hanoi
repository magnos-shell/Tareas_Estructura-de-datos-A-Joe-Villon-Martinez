// Definimos las tres pilas que representan las torres A, B y C
System.Collections.Generic.Stack<int> torreA = new System.Collections.Generic.Stack<int>();
System.Collections.Generic.Stack<int> torreB = new System.Collections.Generic.Stack<int>();
System.Collections.Generic.Stack<int> torreC = new System.Collections.Generic.Stack<int>();

// Función para mostrar el estado actual de las tres torres
void MostrarTorres()
{
    System.Console.WriteLine("Estado actual de las torres:");
    // Imprimimos los discos en cada torre (de arriba hacia abajo)
    System.Console.WriteLine("A: " + string.Join(", ", torreA));
    System.Console.WriteLine("B: " + string.Join(", ", torreB));
    System.Console.WriteLine("C: " + string.Join(", ", torreC));
    System.Console.WriteLine("-----------------------------");
}
// Función que mueve un disco de una torre a otra y muestra el movimiento
void MoverDisco(System.Collections.Generic.Stack<int> origen, System.Collections.Generic.Stack<int> destino, char nombreOrigen, char nombreDestino)
{
    // Sacamos el disco superior de la torre origen
    int disco = origen.Pop();
    // Lo colocamos en la cima de la torre destino
    destino.Push(disco);
 // Informamos al usuario qué movimiento se hizo
    System.Console.WriteLine($"Mover disco {disco} de {nombreOrigen} a {nombreDestino}");
    // Mostramos el estado actualizado de las torres
    MostrarTorres();
}

// Función recursiva que implementa la solución de las Torres de Hanoi
void Hanoi(int n, System.Collections.Generic.Stack<int> origen, System.Collections.Generic.Stack<int> destino, System.Collections.Generic.Stack<int> auxiliar, char nombreOrigen, char nombreDestino, char nombreAuxiliar)
{
    if (n == 1)
    {
        // Caso base: solo queda un disco, lo movemos directamente
        MoverDisco(origen, destino, nombreOrigen, nombreDestino);
    }
    else
    {
        // Paso 1: Mover n-1 discos de la torre origen a la auxiliar
        Hanoi(n - 1, origen, auxiliar, destino, nombreOrigen, nombreAuxiliar, nombreDestino);
